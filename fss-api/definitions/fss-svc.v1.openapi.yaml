openapi: 3.0.1
info:
  title: FSS Service API
  description: ""
  contact:
    name: Konstantin Ignatyev.
    url: http://kgionline.com/
    email: kgignatyev@gmail.com
  license:
    name: BSD 3-Clause License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: CompaniesServiceV1
  - name: JobsServiceV1
security:
  - bearerAuth: [ ]

paths:


  /v1/jobs/action/search:
    post:
        tags:
            - JobsServiceV1
        summary: Search for jobs
        operationId: searchJobs
        requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/v1.SearchRequest'

        responses:
          '200':
            description: A list of jobs
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/v1.JobListResult'
  /v1/jobs:
      get:
        tags:
            - JobsServiceV1
        summary: Get all jobs
        operationId: getAllJobs
        description: Get all jobs which are available to the user
        responses:
          '200':
            description: A list of jobs
            content:
              application/json:
                schema:
                    type: array
                    items:
                      $ref: '#/components/schemas/v1.Job'
      post:
        tags:
            - JobsServiceV1
        summary: Create a new job
        operationId: createJob
        requestBody:
            required: true
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/v1.Job'
        responses:
          '201':
            description: A new job
            content:
              application/json:
                schema:
                    $ref: '#/components/schemas/v1.Job'

  /v1/jobs/{id}:
    get:
      tags:
          - JobsServiceV1
      summary: Get a job by id
      operationId: getJobById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'
    put:
      tags:
          - JobsServiceV1
      summary: Update a job by id
      operationId: updateJobById
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'
      responses:
        '200':
          description: Updated job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'
    delete:
      tags:
          - JobsServiceV1
      summary: Delete a job by id
      operationId: deleteJobById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Job has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'
  /v1/companies:
    get:
      tags:
        - CompaniesServiceV1
        - JobsServiceV1
      summary: Get all companies
      operationId: getAllCompanies
      description: Get all companies which are available to the user
      responses:
        '200':
          description: A list of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Company'
    post:
      tags:
        - CompaniesServiceV1
      summary: Create a new company
      operationId: createCompany
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Company'
      responses:
        '201':
          description: A new company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'

  /v1/companies/{id}:
    get:
      tags:
        - CompaniesServiceV1
      summary: Get a company by id
      operationId: getCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'
    put:
      tags:
        - CompaniesServiceV1
      summary: Update a company by id
      operationId: updateCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Company'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'
    delete:
      tags:
        - CompaniesServiceV1
      summary: Delete a company by id
      operationId: deleteCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Company has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'




components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    id:
      name: id
      schema:
        type: string
      in: path
      required: true
  schemas:
    v1.Status:
      type: object
      properties:
        responseCode:
          type: string
        description:
          type: string
      required: [ responseCode ]

    v1.YN:
      type: string
      enum:
        - Y
        - N
    v1.JobStatus:
      type: string
      enum:
        - FOR_REVIEW
        - REJECTED
        - APPLIED
        - INTERESTED

    v1.CompanyResponse:
      type: string
      enum:
        - NONE
        - REJECTED
        - FILLED
        - CANCELLED

    v1.ListSummary:
        type: object
        properties:
          total:
            type: integer
            format: int64
          offset:
            type: integer
            format: int64
          size:
            type: integer
        required:
            - total
            - offset
            - limit

    v1.Company:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        sourceId:
          type: string
        banned:
          $ref: '#/components/schemas/v1.YN'
        notes:
          type: string
      required:
        - id
        - name
        - createdAt
        - sourceId
        - banned
        - notes

    v1.Pagination:
        type: object
        properties:
          offset:
            type: integer
            format: int64
          limit:
            type: integer
        required:
            - offset
            - limit

    v1.SearchRequest:
      type: object
      properties:
        companyName:
          type: string
          description: optional
        searchExpression:
          type: string
          description: |
            this is SQL like search expression against properties of an object, 
             for example: 'title ilike %java%'
        status:
          $ref: '#/components/schemas/v1.JobStatus'
        pagination:
          $ref: '#/components/schemas/v1.Pagination'
      required:
        - textCriteria
        - pagination

    v1.JobListResult:
        type: object
        properties:
          items:
            type: array
            items:
                $ref: '#/components/schemas/v1.Job'
          listSummary:
            $ref: '#/components/schemas/v1.ListSummary'
        required:
            - items
            - listSummary
    v1.Job:
      type: object
      properties:
          id:
            type: string
          title:
            type: string
          companyName:
            type: string
          sourceId:
            type: string
          status:
            $ref: '#/components/schemas/v1.JobStatus'
          companyResponse:
            $ref: '#/components/schemas/v1.CompanyResponse'
          notes:
            type: string
          createdAt:
            type: string
            format: date-time
          updatedAt:
            type: string
            format: date-time
      required:
            - id
            - title
            - companyId
            - createdAt
            - sourceId
            - banned
            - notes




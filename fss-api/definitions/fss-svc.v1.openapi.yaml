openapi: 3.0.1
info:
  title: FSS Service API
  description: ""
  contact:
    name: Konstantin Ignatyev.
    url: http://kgionline.com/
    email: kgignatyev@gmail.com
  license:
    name: BSD 3-Clause License
    url: https://opensource.org/licenses/BSD-3-Clause
  version: 1.0.0
servers:
  - url: /api
tags:
  - name: AccountsServiceV1
  - name: CompaniesServiceV1
  - name: JobsServiceV1
  - name: SecurityServiceV1
  - name: AutomationServiceV1
security:
  - bearerAuth: [ ]


paths:

  /v1/accounts:
    get:
      tags:
        - AccountsServiceV1
      summary: Get all accounts
      operationId: getAllAccounts
      description: Get all accounts which are available to the user
      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Account'
    post:
      tags:
        - AccountsServiceV1
      summary: Create a new account
      operationId: createAccount
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Account'
      responses:
        '201':
          description: A new account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Account'

  /v1/accounts/action/search:
    post:
      tags:
        - AccountsServiceV1
      summary: Search for accounts
      operationId: searchAccounts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SearchRequest'

      responses:
        '200':
          description: A list of accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.AccountListResult'

  /v1/accounts/{accountId}:
    get:
      tags:
        - AccountsServiceV1
      summary: Get an account by id
      operationId: getAccountById
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: An account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Account'
    put:
      tags:
        - AccountsServiceV1
      summary: Update an account by id
      operationId: updateAccountById
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Account'
      responses:
        '200':
          description: Updated account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Account'
    delete:
      tags:
        - AccountsServiceV1
      summary: Delete an account by id
      operationId: deleteAccountById
      parameters:
        - $ref: '#/components/parameters/accountId'
      responses:
        '200':
          description: Account has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'

  /v1/automation/workflows:
    get:
      tags:
        - AutomationServiceV1
      summary: List recent workflows
      operationId: listWorkflows
      responses:
        200:
          description: workflows and their statuses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/v1.WorkflowInfo"
  /v1/automation/workflows/action/start:
    post:
      tags:
        - AutomationServiceV1
      summary: Start workflow
      operationId: startWorkflow
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.StartWorkflowRequest'
      responses:
        '200' :
          description: 'returns OK is workflow was scheduled successfully'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'
        '400' :
          description: 'error if workflow is already running or unknown'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'

  /v1/jobs/action/search:
    post:
      tags:
        - JobsServiceV1
      summary: Search for jobs
      operationId: searchJobs
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SearchRequest'

      responses:
        '200':
          description: A list of jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.JobListResult'
  /v1/accounts/{accountId}/jobs:
    get:
      parameters:
        - $ref: '#/components/parameters/accountId'
      tags:
        - JobsServiceV1
      summary: Get all jobs
      operationId: getAllJobs
      description: Get all jobs which are available to the user
      responses:
        '200':
          description: A list of jobs
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Job'
    post:
      tags:
        - JobsServiceV1
      summary: Create a new job
      operationId: createJob
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Job'
      responses:
        '201':
          description: A new job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'

  /v1/jobs/{id}/events:
    get:
      tags:
        - JobsServiceV1
      summary: Get all events for a job
      operationId: getJobEvents
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A list of events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.JobEvent'
    post:
      tags:
        - JobsServiceV1
      summary: Create a new event for a job
      operationId: createJobEvent
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.JobEvent'
      responses:
        '201':
          description: A new event
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.JobEvent'

  /v1/jobs/{id}:
    get:
      tags:
        - JobsServiceV1
      summary: Get a job by id
      operationId: getJobById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'
    put:
      tags:
        - JobsServiceV1
      summary: Update a job by id
      operationId: updateJobById
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Job'
      responses:
        '200':
          description: Updated job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Job'
    delete:
      tags:
        - JobsServiceV1
      summary: Delete a job by id
      operationId: deleteJobById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Job has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'
  /v1/accounts/{accountId}/companies:
    get:
      tags:
        - CompaniesServiceV1
        - JobsServiceV1
      parameters:
        - $ref: '#/components/parameters/accountId'
      summary: Get all companies
      operationId: getAllCompanies
      description: Get all companies which are of interest to the account
      responses:
        '200':
          description: A list of companies
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.Company'
    post:
      tags:
        - CompaniesServiceV1
      summary: Create a new company
      operationId: createCompany
      parameters:
        - $ref: '#/components/parameters/accountId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Company'
      responses:
        '201':
          description: A new company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'

  /v1/security/users/{userId}:
    get:
      tags:
        - SecurityServiceV1
      summary: Get a user by id
      operationId: getUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: A user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.User'
    put:
      tags:
        - SecurityServiceV1
      summary: Update a user by id
      operationId: updateUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.User'
      responses:
        '200':
          description: Updated user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.User'
    delete:
      tags:
        - SecurityServiceV1
      summary: Delete a user by id
      operationId: deleteUserById
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: User has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'

  /v1/security/users/action/search:
    post:
      tags:
        - SecurityServiceV1
      summary: Search for users
      operationId: searchUsers
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.SearchRequest'

      responses:
        '200':
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.UsersListResult'

  /v1/security/policies/action/list-for-user/{userId}:
    get:
      tags:
        - SecurityServiceV1
      summary: Get a security policies for user
      operationId: getSecurityPoliciesForUser
      parameters:
        - $ref: '#/components/parameters/userId'
      responses:
        '200':
          description: A security policy
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/v1.SecurityPolicy'

  /v1/companies/{id}:
    get:
      tags:
        - CompaniesServiceV1
      summary: Get a company by id
      operationId: getCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: A company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'
    put:
      tags:
        - CompaniesServiceV1
      summary: Update a company by id
      operationId: updateCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/v1.Company'
      responses:
        '200':
          description: Updated company
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Company'
    delete:
      tags:
        - CompaniesServiceV1
      summary: Delete a company by id
      operationId: deleteCompanyById
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        '200':
          description: Company has been deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/v1.Status'




components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    id:
      name: id
      schema:
        type: string
      in: path
      required: true
    accountId:
      name: accountId
      description: "can be 'my' to get current user's storage"
      schema:
        type: string
      in: path
      required: true
    userId:
      name: userId
      description: "can be 'my' to get current user's data"
      schema:
        type: string
      in: path
      required: true
  schemas:

    v1.Status:
      type: object
      properties:
        responseCode:
          type: string
        description:
          type: string
      required: [ responseCode ]

    v1.YN:
      type: string
      enum:
        - Y
        - N

    v1.User:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        email:
          type: string
        jwtSub:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - id
        - name
        - createdAt
        - updatedAt
    v1.Account:
      type: object
      properties:
        id:
          type: string
        ownerId:
          type: string
        name:
          type: string
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        active:
          $ref: '#/components/schemas/v1.YN'
      required:
        - id
        - name
        - ownerId
        - createdAt
        - active

    v1.JobStatus:
      type: string
      enum:
        - FOR_REVIEW
        - NOT_INTERESTED
        - APPLIED
        - INTERVIEWING
        - APPLIED_VIA_AGENCY
        - POSITION_CLOSED
        - REJECTED_BY_COMPANY
        - HIRED

    v1.JobEventType:
      type: string
      enum:
        - APPLIED
        - APPLIED_VIA_AGENCY
        - INTERVIEW_SCHEDULED
        - INTERVIEWED
        - NOT_INTERESTED
        - REJECTED
        - HIRED
        - POSITION_CLOSED
        - CANCELLED
        - OTHER

    v1.JobEvent:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
        eventType:
          $ref: '#/components/schemas/v1.JobEventType'
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - id
        - jobId
        - eventType
        - notes
        - createdAt

    v1.CompanyResponse:
      type: string
      enum:
        - NONE
        - REJECTED
        - FILLED
        - CANCELLED

    v1.ListSummary:
      type: object
      properties:
        total:
          type: integer
          format: int64
        offset:
          type: integer
          format: int64
        size:
          type: integer
      required:
        - total
        - offset
        - limit

    v1.Company:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        name:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        sourceId:
          type: string
        banned:
          $ref: '#/components/schemas/v1.YN'
        notes:
          type: string

      required:
        - id
        - name
        - createdAt
        - sourceId
        - banned
        - notes

    v1.Pagination:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        limit:
          type: integer
      required:
        - offset
        - limit

    v1.SearchRequest:
      type: object
      properties:
        searchExpression:
          type: string
          description: |
            this is SQL like search expression against properties of an object, 
             for example: 'title ilike %java%', can be an empty string to match all
        sortExpression:
          type: string
          description: |
            this is SQL like sort expression against properties of an object, 
             for example: 'title [asc|desc], createdAt [asc|desc]', if empty then server chooses default sort
        status:
          $ref: '#/components/schemas/v1.JobStatus'
        pagination:
          $ref: '#/components/schemas/v1.Pagination'
      required:
        - searchExpression
        - sortExpression
        - pagination

    v1.SecurityPolicy:
      type: object
      properties:
        id:
          type: string
        policyExpression:
          type: string
      required:
        - id
        - policyExpression

    v1.UsersListResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.User'
        listSummary:
          $ref: '#/components/schemas/v1.ListSummary'
      required:
        - items
        - listSummary

    v1.JobListResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.Job'
        listSummary:
          $ref: '#/components/schemas/v1.ListSummary'
      required:
        - items
        - listSummary

    v1.AccountListResult:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/v1.Account'
        listSummary:
          $ref: '#/components/schemas/v1.ListSummary'
      required:
        - items
        - listSummary

    v1.Job:
      type: object
      properties:
        id:
          type: string
        accountId:
          type: string
        title:
          type: string
        companyName:
          type: string
        sourceId:
          type: string
        status:
          $ref: '#/components/schemas/v1.JobStatus'
        companyResponse:
          $ref: '#/components/schemas/v1.CompanyResponse'
        notes:
          type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        agencyName:
          type: string
          description: optional, name of the agency which represents you for the job
        agentName:
          type: string
          description: optional, name of the recruiter at the agency
        events:
          type: array
          items:
            $ref: '#/components/schemas/v1.JobEvent'
      required:
        - id
        - accountId
        - title
        - createdAt
        - sourceId
        - status
        - notes

    v1.WorkflowInfo:
      type: object
      properties:
        id: { type: string }
        wfType: { type: string }
        status: { type: string }
      required: [ id, wfType, status ]

    v1.StartWorkflowRequest:
      type: object
      properties:
        wfType: {type: string}
      required: [ wfType]
